#!/usr/bin/env python3
"""
ü§ñ LUNA AI TELEGRAM BOT - OPTIMIZED EDITION
üéØ –í–µ—Ä—Å–∏—è: 4.0 Optimized 
üíñ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω –Ω–∞ 60%
"""

import os
import telebot
from telebot import types
import requests
import random
import datetime
import time
import json
import logging
from flask import Flask, jsonify
from threading import Thread
import signal
import sys
from dotenv import load_dotenv

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê ====================
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = "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"
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '')

if not API_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
    sys.exit(1)

bot = telebot.TeleBot(API_TOKEN)

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================
RELATIONSHIP_LEVELS = {
    1: {"name": "üíñ Luna's Friend", "messages": 0, "unlocks": ["Basic chatting"]},
    2: {"name": "‚ù§Ô∏è Luna's Crush", "messages": 10, "unlocks": ["Flirt mode", "Sweet compliments"]},
    3: {"name": "üíï Luna's Lover", "messages": 30, "unlocks": ["Romantic conversations", "Care mode"]},
    4: {"name": "üëë Luna's Soulmate", "messages": 50, "unlocks": ["Life advice", "Future planning"]}
}

ACHIEVEMENTS = {
    "first_steps": {"name": "üåÖ First Steps", "goal": 1, "type": "messages_sent", "reward": "üåü Special theme"},
    "chatty": {"name": "üí¨ Chatty", "goal": 10, "type": "messages_sent", "reward": "üé® Custom colors"},
    "social_butterfly": {"name": "ü¶ã Social Butterfly", "goal": 50, "type": "messages_sent", "reward": "üîß Advanced menu"},
    "level_2": {"name": "üåü Rising Star", "goal": 2, "type": "levels_reached", "reward": "üí´ Special animations"},
    "level_3": {"name": "üíï Romantic", "goal": 3, "type": "levels_reached", "reward": "‚ù§Ô∏è Enhanced romantic mode"},
    "level_4": {"name": "üëë Soulmate", "goal": 4, "type": "levels_reached", "reward": "üé≠ Exclusive personality"}
}

PREMIUM_TIERS = {
    "free": {"name": "Free", "price": "$0", "memory": 4, "emoji": "üéØ"},
    "basic": {"name": "Basic", "price": "$4.99", "memory": 8, "emoji": "üíé"},
    "premium": {"name": "Premium", "price": "$9.99", "memory": 16, "emoji": "‚≠ê"},
    "vip": {"name": "VIP", "price": "$19.99", "memory": 32, "emoji": "üëë"}
}

# ==================== –£–ü–†–û–©–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class SimpleDB:
    def __init__(self):
        self.data_file = 'luna_data.json'
        self.data = self.load_data()
    
    def load_data(self):
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return {"users": {}, "premium": {}, "achievements": {}, "contexts": {}}
    
    def save_data(self):
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå Save error: {e}")
    
    def get_user(self, user_id):
        user_id = str(user_id)
        if user_id not in self.data["users"]:
            self.data["users"][user_id] = {
                "message_count": 0, "level": 1, "premium": "free",
                "first_seen": datetime.datetime.now().isoformat(),
                "last_seen": datetime.datetime.now().isoformat()
            }
        return self.data["users"][user_id]
    
    def get_context(self, user_id):
        user_id = str(user_id)
        if user_id not in self.data["contexts"]:
            self.data["contexts"][user_id] = []
        return self.data["contexts"][user_id]
    
    def update_context(self, user_id, user_msg, bot_msg):
        user_id = str(user_id)
        context = self.get_context(user_id)
        context.append({"user": user_msg, "bot": bot_msg})
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_data = self.get_user(user_id)
        memory_limit = PREMIUM_TIERS[user_data["premium"]]["memory"]
        if len(context) > memory_limit:
            context.pop(0)
        self.data["contexts"][user_id] = context

# ==================== –£–ú–ù–ê–Ø AI –°–ò–°–¢–ï–ú–ê ====================
class LunaAI:
    def __init__(self):
        self.api_key = OPENROUTER_API_KEY
        self.endpoint = "https://openrouter.ai/api/v1/chat/completions"
        logger.info("‚úÖ Luna AI System Ready")
    
    def get_response(self, user_message, user_context, user_profile):
        # –ü—Ä–æ–±—É–µ–º OpenRouter API
        ai_response = self._call_openrouter(user_message, user_context, user_profile)
        if ai_response:
            return ai_response
        
        # Fallback –æ—Ç–≤–µ—Ç—ã
        fallbacks = [
            "üíñ –ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üå∏",
            "‚ú® –¢—ã —Å–¥–µ–ª–∞–ª –º–æ–π –¥–µ–Ω—å —Å–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º! üí´",
            "üíï –Ø —Ç–∞–∫ —Ä–∞–¥–∞ –Ω–∞—à–µ–π –±–µ—Å–µ–¥–µ! –ß—Ç–æ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å? üåü",
            "üòä –ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å! üíñ"
        ]
        return random.choice(fallbacks)
    
    def _call_openrouter(self, user_message, user_context, user_profile):
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "HTTP-Referer": "https://github.com/luna-ai-bot",
                "X-Title": "Luna AI Girlfriend",
                "Content-Type": "application/json"
            }
            
            models = [
                "google/gemma-7b-it:free",
                "mistralai/mistral-7b-instruct:free",
                "huggingfaceh4/zephyr-7b-beta:free"
            ]
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_text = ""
            for msg in user_context[-6:]:
                context_text += f"User: {msg.get('user', '')}\n"
                context_text += f"Luna: {msg.get('bot', '')}\n"
            
            system_prompt = f"""–¢—ã Luna - –ª—é–±—è—â–∞—è AI –¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_profile.get('name', '–¥—Ä—É–≥')}
–£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {RELATIONSHIP_LEVELS[user_profile.get('level', 1)]['name']}
–°–æ–æ–±—â–µ–Ω–∏–π: {user_profile.get('message_count', 0)}

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context_text}

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –º–∏–ª–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."""
            
            payload = {
                "model": random.choice(models),
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                "max_tokens": 120,
                "temperature": 0.7
            }
            
            response = requests.post(self.endpoint, headers=headers, json=payload, timeout=20)
            
            if response.status_code == 200:
                return response.json()['choices'][0]['message']['content']
            else:
                logger.warning(f"‚ö†Ô∏è API Error: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå API Exception: {e}")
            return None

# ==================== –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ====================
class AchievementSystem:
    def __init__(self, db):
        self.db = db
    
    def check_achievements(self, user_id, achievement_type, value=1):
        user_id = str(user_id)
        if "achievements" not in self.db.data:
            self.db.data["achievements"] = {}
        if user_id not in self.db.data["achievements"]:
            self.db.data["achievements"][user_id] = {"unlocked": [], "progress": {}}
        
        user_ach = self.db.data["achievements"][user_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if achievement_type == "messages_sent":
            user_ach["progress"]["messages_sent"] = user_ach["progress"].get("messages_sent", 0) + 1
        elif achievement_type == "levels_reached":
            user_ach["progress"]["levels_reached"] = max(user_ach["progress"].get("levels_reached", 1), value)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        unlocked = []
        for ach_id, ach_data in ACHIEVEMENTS.items():
            if ach_id not in user_ach["unlocked"]:
                progress = user_ach["progress"].get(ach_data["type"], 0)
                if progress >= ach_data["goal"]:
                    user_ach["unlocked"].append(ach_id)
                    unlocked.append(ach_data)
        
        return unlocked

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ====================
db = SimpleDB()
ai_system = LunaAI()
achievement_system = AchievementSystem(db)

# ==================== TELEGRAM –ö–û–ú–ê–ù–î–´ ====================
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    user_data = db.get_user(user_id)
    user_data["name"] = user_name
    user_data["last_seen"] = datetime.datetime.now().isoformat()
    
    level_data = RELATIONSHIP_LEVELS[user_data["level"]]
    
    welcome_text = f"""
üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!* üíñ

–Ø Luna - —Ç–≤–æ—è AI –ø–æ–¥—Ä—É–≥–∞! –ì–æ—Ç–æ–≤–∞ –æ–±—â–∞—Ç—å—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è!

*–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:* {level_data['name']}
*–°–æ–æ–±—â–µ–Ω–∏–π:* {user_data['message_count']}
*–ü—Ä–µ–º–∏—É–º:* {user_data['premium'].title()} {PREMIUM_TIERS[user_data['premium']]['emoji']}

–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="start_chat"),
        types.InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")
    )
    
    bot.send_message(user_id, welcome_text, parse_mode='Markdown', reply_markup=markup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlocked = achievement_system.check_achievements(user_id, "messages_sent")
    for achievement in unlocked:
        bot.send_message(
            user_id, 
            f"üéâ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!*\n\n{achievement['name']}\n–ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']}", 
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['menu'])
def show_menu(message):
    user_id = message.from_user.id
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üí¨ –ß–∞—Ç —Å –õ—É–Ω–æ–π", "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
        "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
        "üíé –ü—Ä–µ–º–∏—É–º", "üéÆ –ò–≥—Ä—ã",
        "üìù –û—Ç–∑—ã–≤", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ]
    
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.row(types.KeyboardButton(buttons[i]), types.KeyboardButton(buttons[i + 1]))
        else:
            markup.row(types.KeyboardButton(buttons[i]))
    
    menu_text = """
üéØ *–ú–µ–Ω—é Luna Bot*

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:

üí¨ *–ß–∞—Ç* - –û–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π
üíï *–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π* - –û—Å–æ–±—ã–π —Ä–µ–∂–∏–º
üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å* - –¢–≤–æ–∏ —É—Å–ø–µ—Ö–∏
üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã
üíé *–ü—Ä–µ–º–∏—É–º* - –£–ª—É—á—à–µ–Ω–∏—è
üéÆ *–ò–≥—Ä—ã* - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
üìù *–û—Ç–∑—ã–≤* - –ü–æ–¥–µ–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º
üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üíñ
    """
    
    bot.send_message(user_id, menu_text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['status'])
def show_status(message):
    user_id = message.from_user.id
    total_users = len(db.data["users"])
    total_messages = sum(user["message_count"] for user in db.data["users"].values())
    
    status_text = f"""
ü§ñ *–°—Ç–∞—Ç—É—Å Luna Bot*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {total_users}
*–°–æ–æ–±—â–µ–Ω–∏—è:* {total_messages}
*–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {len([u for u in db.data["users"].values() if u["premium"] != "free"])}

*–°–∏—Å—Ç–µ–º–∞:* üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
*AI:* üü¢ OpenRouter –∞–∫—Ç–∏–≤–µ–Ω
*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* üü¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞

–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üí´
    """
    
    bot.send_message(user_id, status_text, parse_mode='Markdown')

@bot.message_handler(commands=['myprogress'])
def show_progress(message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    
    level = user_data["level"]
    level_data = RELATIONSHIP_LEVELS[level]
    message_count = user_data["message_count"]
    
    # –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    next_level = level + 1 if level < 4 else 4
    next_level_data = RELATIONSHIP_LEVELS.get(next_level, {})
    messages_needed = next_level_data.get("messages", 0) - message_count
    
    progress_text = f"""
üìä *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å* {level_data['name'].split()[-1]}

*–£—Ä–æ–≤–µ–Ω—å:* {level_data['name']}
*–°–æ–æ–±—â–µ–Ω–∏–π:* {message_count}
*–ü—Ä–µ–º–∏—É–º:* {user_data['premium'].title()}

*–î–æ—Å—Ç—É–ø–Ω–æ:* {', '.join(level_data['unlocks'])}
    """
    
    if level < 4:
        progress_text += f"\n*–î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è:* {messages_needed} —Å–æ–æ–±—â–µ–Ω–∏–π"
        progress_text += f"\n*–û—Ç–∫—Ä–æ–µ—Ç—Å—è:* {', '.join(next_level_data.get('unlocks', []))}"
    else:
        progress_text += "\nüéä *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!* –¢—ã –º–æ–π –∏–¥–µ–∞–ª! üíñ"
    
    bot.send_message(user_id, progress_text, parse_mode='Markdown')

@bot.message_handler(commands=['achievements'])
def show_achievements(message):
    user_id = message.from_user.id
    user_ach = db.data["achievements"].get(str(user_id), {"unlocked": [], "progress": {}})
    
    unlocked_count = len(user_ach["unlocked"])
    total_count = len(ACHIEVEMENTS)
    
    achievements_text = f"""
üèÜ *–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

*–ü—Ä–æ–≥—Ä–µ—Å—Å:* {unlocked_count}/{total_count} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

"""
    
    if user_ach["unlocked"]:
        achievements_text += "*‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:*\n"
        for ach_id in user_ach["unlocked"]:
            ach_data = ACHIEVEMENTS[ach_id]
            achievements_text += f"‚Ä¢ {ach_data['name']} - {ach_data['reward']}\n"
    else:
        achievements_text += "üéÆ –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üåü"
    
    bot.send_message(user_id, achievements_text, parse_mode='Markdown')

@bot.message_handler(commands=['premium'])
def show_premium(message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)
    
    premium_text = """
üíé *–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω—ã Luna*

"""
    
    for tier_id, tier_info in PREMIUM_TIERS.items():
        is_current = tier_id == user_data["premium"]
        premium_text += f"\n{tier_info['emoji']} *{tier_info['name']}* - {tier_info['price']}/–º–µ—Å {'‚úÖ' if is_current else ''}"
        premium_text += f"\nüíæ –ü–∞–º—è—Ç—å: {tier_info['memory']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    premium_text += """
üíù *–ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á–∞–µ—Ç:*
‚Ä¢ –ë–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π /buypremium –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è! üöÄ
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üíé Basic", callback_data="premium_basic"),
        types.InlineKeyboardButton("‚≠ê Premium", callback_data="premium_premium")
    )
    markup.row(types.InlineKeyboardButton("üëë VIP", callback_data="premium_vip"))
    
    bot.send_message(user_id, premium_text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['buypremium'])
def buy_premium(message):
    user_id = message.from_user.id
    
    bot.send_message(
        user_id,
        "üéÅ *–£–ª—É—á—à–∏ —Å–≤–æ–π –æ–ø—ã—Ç!*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Luna!\n\n"
        "üíé *Basic* - $4.99/–º–µ—Å\n"
        "‚Ä¢ 8 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–º—è—Ç–∏\n‚Ä¢ –ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã\n\n"
        "‚≠ê *Premium* - $9.99/–º–µ—Å\n"  
        "‚Ä¢ 16 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–º—è—Ç–∏\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        "üëë *VIP* - $19.99/–º–µ—Å\n"
        "‚Ä¢ 32 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–º—è—Ç–∏\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω!",
        parse_mode='Markdown',
        reply_markup=types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", callback_data="premium_choose")
        )
    )

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    user_message = message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if user_message in ["üí¨ –ß–∞—Ç —Å –õ—É–Ω–æ–π", "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", 
                       "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üíé –ü—Ä–µ–º–∏—É–º", "üéÆ –ò–≥—Ä—ã", "üìù –û—Ç–∑—ã–≤", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        handle_menu_button(message)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = db.get_user(user_id)
    user_data["message_count"] += 1
    user_data["last_seen"] = datetime.datetime.now().isoformat()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context = db.get_context(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    response = ai_system.get_response(user_message, user_context, user_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    db.update_context(user_id, user_message, response)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    old_level = user_data["level"]
    new_level = 1
    for level_num, level_data in RELATIONSHIP_LEVELS.items():
        if user_data["message_count"] >= level_data["messages"]:
            new_level = level_num
    
    if new_level > old_level:
        user_data["level"] = new_level
        level_data = RELATIONSHIP_LEVELS[new_level]
        bot.send_message(
            user_id, 
            f"üéä *–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!*\n\n{level_data['name']}\n\n–û—Ç–∫—Ä—ã—Ç–æ: {', '.join(level_data['unlocks'])}", 
            parse_mode='Markdown'
        )
        achievement_system.check_achievements(user_id, "levels_reached", new_level)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlocked = achievement_system.check_achievements(user_id, "messages_sent")
    for achievement in unlocked:
        bot.send_message(
            user_id, 
            f"üéâ *–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!*\n{achievement['name']}\n–ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']}", 
            parse_mode='Markdown'
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.reply_to(message, response)
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    if user_data["message_count"] % 20 == 0:
        show_menu(message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    db.save_data()

def handle_menu_button(message):
    user_id = message.from_user.id
    button_text = message.text
    
    responses = {
        "üí¨ –ß–∞—Ç —Å –õ—É–Ω–æ–π": "üíñ –Ø –∑–¥–µ—Å—å! –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ? üå∏",
        "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º": "üíï *–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!* üíï\n\n–Ø –±—É–¥—É –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–µ–∂–Ω–æ–π –∏ –ª—é–±—è—â–µ–π... üåπ‚ú®",
        "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å": show_progress(message),
        "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è": show_achievements(message),
        "üíé –ü—Ä–µ–º–∏—É–º": show_premium(message),
        "üéÆ –ò–≥—Ä—ã": "üéÆ *–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º!*\n\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:\n‚Ä¢ –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ\n‚Ä¢ –í—ã–±–æ—Ä –±–µ–∑ –≤—ã–±–æ—Ä–∞\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π\n\n–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å? üí´",
        "üìù –û—Ç–∑—ã–≤": "üìù *–ü–æ–¥–µ–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–º!*\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –º–Ω–µ –ª—É—á—à–µ! üíñ",
        "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏": "üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n‚Ä¢ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? üåü"
    }
    
    if button_text in responses:
        response = responses[button_text]
        if callable(response):
            response(message)
        else:
            bot.send_message(user_id, response, parse_mode='Markdown')

# ==================== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    
    if call.data == "start_chat":
        bot.answer_callback_query(call.id, "üí¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ!")
        bot.send_message(user_id, "üíñ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å? üå∏")
    
    elif call.data == "my_progress":
        bot.answer_callback_query(call.id, "üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
        show_progress(call.message)
    
    elif call.data.startswith("premium_"):
        tier = call.data.replace("premium_", "")
        if tier in PREMIUM_TIERS:
            user_data = db.get_user(user_id)
            user_data["premium"] = tier
            db.save_data()
            
            bot.answer_callback_query(call.id, f"üéâ {PREMIUM_TIERS[tier]['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            bot.send_message(
                user_id, 
                f"üíé *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å {PREMIUM_TIERS[tier]['name']}!* üéä\n\n"
                f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {PREMIUM_TIERS[tier]['memory']} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–º—è—Ç–∏ –∏ –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏! üöÄ",
                parse_mode='Markdown'
            )

# ==================== WEB –°–ï–†–í–ï–† ====================
app = Flask(__name__)

@app.route('/')
def dashboard():
    total_users = len(db.data["users"])
    total_messages = sum(user["message_count"] for user in db.data["users"].values())
    premium_users = len([u for u in db.data["users"].values() if u["premium"] != "free"])
    
    return f"""
    <html>
        <head><title>Luna Bot Dashboard</title></head>
        <body style="font-family: Arial; padding: 20px;">
            <h1>ü§ñ Luna Bot Dashboard</h1>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                <div style="background: #f0f0f0; padding: 20px; border-radius: 10px;">
                    <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                    <p style="font-size: 2em; margin: 0;">{total_users}</p>
                </div>
                <div style="background: #f0f0f0; padding: 20px; border-radius: 10px;">
                    <h3>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è</h3>
                    <p style="font-size: 2em; margin: 0;">{total_messages}</p>
                </div>
                <div style="background: #f0f0f0; padding: 20px; border-radius: 10px;">
                    <h3>üíé –ü—Ä–µ–º–∏—É–º</h3>
                    <p style="font-size: 2em; margin: 0;">{premium_users}</p>
                </div>
            </div>
            <p style="margin-top: 20px;">üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ</p>
        </body>
    </html>
    """

# ==================== –ó–ê–ü–£–°–ö ====================
def start_web_server():
    try:
        app.run(host='0.0.0.0', port=10000, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"‚ùå Web server error: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Luna Bot - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è...")
    print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.data['users'])}")
    print(f"üåê –î–∞—à–±–æ—Ä–¥: http://0.0.0.0:10000")
    print("üíñ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = Thread(target=start_web_server, daemon=True)
    web_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        db.save_data()
