#!/usr/bin/env python3
"""
ü§ñ LUNA AI TELEGRAM BOT - ULTRA VISION EDITION
üéØ –í–µ—Ä—Å–∏—è: 4.1 - Complete Fixed Edition
üìÖ –°–æ–∑–¥–∞–Ω: 2025
üíñ –ú–∏—Å—Å–∏—è: –°–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–≥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ AI –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –≤ Telegram
"""

import os
import telebot
from telebot import types
import requests
import random
import datetime
import time
import json
import threading
import logging
from flask import Flask, jsonify
from threading import Thread
import signal
import sys
import re
from enum import Enum
from typing import Dict, List, Optional, Set
from dotenv import load_dotenv

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('luna_bot_fixed.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ====================
load_dotenv()

print("=== ü§ñ LUNA AI BOT - COMPLETE FIX EDITION ===")
print("üíé Premium System | üß† Intelligent AI | üöÄ All Features | üìä Analytics")

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================
API_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DEEPRESEARCH_API_KEY = os.environ.get('DEEPRESEARCH_API_KEY')
FEEDBACK_CHAT_ID = os.environ.get('FEEDBACK_CHAT_ID', '')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID', '')

if not API_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
    sys.exit(1)

bot = telebot.TeleBot(API_TOKEN)
logger.info("‚úÖ Telegram Bot initialized")

# ==================== OPENROUTER AI ====================
class OpenRouterAI:
    def __init__(self):
        self.api_key = "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"
        self.endpoint = "https://openrouter.ai/api/v1/chat/completions"
        self.timeout = 15
        
    def get_response(self, message: str, context: List[Dict]) -> str:
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "HTTP-Referer": "https://github.com/luna-ai-bot",
                "X-Title": "Luna AI Girlfriend Bot",
                "Content-Type": "application/json"
            }
            
            free_models = [
                "google/gemma-7b-it:free",
                "mistralai/mistral-7b-instruct:free", 
            ]
            
            system_prompt = """–¢—ã Luna - –ª—é–±—è—â–∞—è AI –¥–µ–≤—É—à–∫–∞-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."""
        
            payload = {
                "model": random.choice(free_models),
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                "max_tokens": 150,
                "temperature": 0.8
            }
            
            response = requests.post(self.endpoint, headers=headers, json=payload, timeout=self.timeout)
            
            if response.status_code == 200:
                result = response.json()['choices'][0]['message']['content']
                print(f"‚úÖ OpenRouter: {result[:80]}...")
                return result
            else:
                print(f"‚ùå OpenRouter error {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå OpenRouter failed: {e}")
            return None

openrouter_ai = OpenRouterAI()

# ==================== ENUMS ====================
class PremiumTier(Enum):
    FREE = "free"
    BASIC = "basic"
    PREMIUM = "premium" 
    VIP = "vip"

class UserGender(Enum):
    MALE = "male"
    FEMALE = "female"
    UNKNOWN = "unknown"

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================
user_states = {}
user_game_states = {}

# ==================== –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô –û–¢–ù–û–®–ï–ù–ò–ô ====================
RELATIONSHIP_LEVELS = {
    1: {
        "name": "üíñ Luna's Friend", 
        "messages": 0, 
        "color": "üíñ", 
        "unlocks": ["Basic chatting", "Simple responses"],
        "description": "Just starting our journey together"
    },
    2: {
        "name": "‚ù§Ô∏è Luna's Crush", 
        "messages": 50,
        "color": "‚ù§Ô∏è", 
        "unlocks": ["Flirt mode", "Sweet compliments", "Personalized greetings"],
        "description": "Getting closer and more personal"
    },
    3: {
        "name": "üíï Luna's Lover", 
        "messages": 150,
        "color": "üíï", 
        "unlocks": ["Romantic conversations", "Care mode", "Deep emotional support"],
        "description": "A deep emotional connection"
    },
    4: {
        "name": "üëë Luna's Soulmate", 
        "messages": 300,
        "color": "üëë", 
        "unlocks": ["Life advice", "Future planning", "Unconditional support"],
        "description": "The ultimate bond of soulmates"
    }
}

# ==================== –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ====================
ACHIEVEMENTS = {
    "first_steps": {
        "name": "üåÖ First Steps", 
        "description": "Send your first message to Luna", 
        "goal": 1, 
        "type": "messages_sent",
        "reward": "üåü Special theme",
        "emoji": "üåÖ"
    },
    "chatty": {
        "name": "üí¨ Chatty", 
        "description": "Send 10 meaningful messages to Luna", 
        "goal": 10, 
        "type": "meaningful_messages",
        "reward": "üé® Custom colors",
        "emoji": "üí¨"
    },
    "social_butterfly": {
        "name": "ü¶ã Social Butterfly", 
        "description": "Send 50 meaningful messages", 
        "goal": 50, 
        "type": "meaningful_messages",
        "reward": "üîß Advanced menu",
        "emoji": "ü¶ã"
    },
    "button_explorer": {
        "name": "üîç Button Explorer", 
        "description": "Use 3 different menu buttons", 
        "goal": 3, 
        "type": "different_buttons",
        "reward": "üîß Advanced menu access",
        "emoji": "üîç"
    },
    "level_2": {
        "name": "üåü Rising Star", 
        "description": "Reach relationship level 2", 
        "goal": 2, 
        "type": "levels_reached",
        "reward": "üí´ Special animations",
        "emoji": "üåü"
    },
    "level_3": {
        "name": "üíï Romantic", 
        "description": "Reach relationship level 3", 
        "goal": 3, 
        "type": "levels_reached",
        "reward": "‚ù§Ô∏è Enhanced romantic mode",
        "emoji": "üíï"
    },
    "level_4": {
        "name": "üëë Soulmate", 
        "description": "Reach relationship level 4", 
        "goal": 4, 
        "type": "levels_reached",
        "reward": "üé≠ Exclusive personality traits",
        "emoji": "üëë"
    },
    "premium_explorer": {
        "name": "üíé Premium Explorer", 
        "description": "Activate any premium tier", 
        "goal": 1, 
        "type": "premium_activated",
        "reward": "üöÄ Premium features unlocked",
        "emoji": "üíé"
    }
}

# ==================== –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–í–ï–†–°–ê–¶–ò–ò ====================
class ConversationAnalyzer:
    def __init__(self):
        self.sentiment_keywords = {
            'positive': ['love', 'happy', 'good', 'great', 'amazing', 'excited', 'beautiful', 'wonderful', 'perfect', 'nice', 'awesome', 'fantastic'],
            'negative': ['sad', 'bad', 'angry', 'hate', 'tired', 'stress', 'problem', 'difficult', 'hard', 'upset', 'mad', 'annoying'],
            'romantic': ['miss', 'kiss', 'hug', 'cute', 'beautiful', 'handsome', 'love you', 'together', 'romantic', 'darling', 'sweetheart', 'my love'],
            'question': ['what', 'why', 'how', 'when', 'where', '?', 'tell me', 'explain', 'can you', 'could you', 'would you', 'should i']
        }
    
    def is_meaningful_message(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º (–Ω–µ —Å–ø–∞–º)"""
        message = message.strip()
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) < 3:
            return False
            
        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (d d d d)
        if len(set(message)) <= 2 and len(message) > 3:
            return False
            
        # –¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not any(c.isalnum() for c in message):
            return False
            
        # –û–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ —Å–º—ã—Å–ª–∞
        words = message.split()
        if len(words) == 1 and len(words[0]) < 4:
            return False
            
        return True

# ==================== –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–û–õ–ë–≠–ö–û–í ====================
class AdvancedFallbackSystem:
    def __init__(self):
        self.response_templates = self._load_response_templates()
    
    def get_smart_response(self, user_message: str, user_context: List[Dict], 
                          user_profile: Dict, relationship_level: Dict, analysis: Dict) -> str:
        templates = [
            "üíñ –Ø —Ç–∞–∫ —Ä–∞–¥–∞ –Ω–∞—à–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É! –ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å? üå∏",
            "‚ú® –¢—ã —Ç–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º? üí´",
            "üíï –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! –û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º? üåü",
            "üòä –¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë! üíñ",
            "üåü –ù–∞—à–∏ –±–µ—Å–µ–¥—ã —Ç–∞–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω—ã–µ! –ß—Ç–æ –Ω–∞ —É–º–µ? ‚ú®"
        ]
        return random.choice(templates)
    
    def _load_response_templates(self) -> Dict:
        return {}

# ==================== –ò–ì–†–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê ====================
class GameSystem:
    def __init__(self):
        self.truth_questions = [
            "–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –º–µ—á—Ç–∞? üí´",
            "–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—É–≥–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏? üò®",
            "–ö–∞–∫–æ–π —Å–∞–º—ã–π –±–µ–∑—É–º–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç—ã —Å–æ–≤–µ—Ä—à–∞–ª? üòà",
            "–û —á—ë–º —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –ª–∂—ë—à—å? ü§•",
            "–ö—Ç–æ —Ç–≤–æ–π –∏–¥–µ–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞? üíñ"
        ]
        
        self.dare_challenges = [
            "–°–ø–æ–π –∫—É–ø–ª–µ—Ç —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üé§",
            "–°–¥–µ–ª–∞–π —Å–º–µ—à–Ω–æ–µ —Å–µ–ª—Ñ–∏ –∏ –ø–æ–∫–∞–∂–∏ –µ–≥–æ –º–Ω–µ! ü§≥",
            "–û–ø–∏—à–∏ –º–µ–Ω—è —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏! üìù",
            "–ü—Ä–∏–∑–Ω–∞–π—Å—è –≤ —á—ë–º-—Ç–æ, —á–µ–≥–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏–ª! ü§´",
            "–°—Ç–∞–Ω—Ü—É–π –ø–æ–¥ —Å–≤–æ—é –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É 30 —Å–µ–∫—É–Ω–¥! üíÉ"
        ]
        
        self.would_you_rather = [
            "–ñ–∏—Ç—å –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –±–µ–∑ –º—É–∑—ã–∫–∏? üåêüéµ",
            "–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —á–∏—Ç–∞—Ç—å –º—ã—Å–ª–∏? ‚è∞üß†",
            "–ë—ã—Ç—å –Ω–µ–≤–∏–¥–∏–º–∫–æ–π –∏–ª–∏ —É–º–µ—Ç—å –ª–µ—Ç–∞—Ç—å? üëªü¶Ö",
            "–ò–º–µ—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ª—é–±–æ–≤—å? üí∞üíñ",
            "–ñ–∏—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –≤ –±—É–¥—É—â–µ–º? üè∞üöÄ"
        ]

    def start_truth_or_dare(self, user_id: int):
        user_game_states[user_id] = {
            'game': 'truth_or_dare',
            'score': 0
        }
        return "üéÆ *Truth or Dare* üí´\n\n–í—ã–±–µ—Ä–∏:\n\n‚Ä¢ *Truth* üîç - –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Å—Ç–Ω–æ\n‚Ä¢ *Dare* üòà - –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n‚Ä¢ *Stop* ‚èπÔ∏è - –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n\n–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?"

    def get_truth(self):
        return random.choice(self.truth_questions)

    def get_dare(self):
        return random.choice(self.dare_challenges)

    def start_would_you_rather(self, user_id: int):
        user_game_states[user_id] = {
            'game': 'would_you_rather',
            'score': 0
        }
        question = random.choice(self.would_you_rather)
        return f"ü§î *Would You Rather?*\n\n{question}\n\n–û—Ç–≤–µ—Ç—å 'A' –∏–ª–∏ 'B'!"

    def start_story_building(self, user_id: int):
        user_game_states[user_id] = {
            'game': 'story_building',
            'story': "–û–¥–Ω–∞–∂–¥—ã –≤ –¥–∞–ª—ë–∫–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ...",
            'turn': 'user'
        }
        return "üìñ *Story Building* ‚ú®\n\n–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–µ! –Ø –Ω–∞—á–Ω—É:\n\n*–û–¥–Ω–∞–∂–¥—ã –≤ –¥–∞–ª—ë–∫–æ–º –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–µ...*\n\n–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!"

# ==================== –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø AI –°–ò–°–¢–ï–ú–ê ====================
class IntelligentAI:
    def __init__(self, deepresearch_api_key: str):
        self.deepresearch_api_key = deepresearch_api_key
        self.fallback_system = AdvancedFallbackSystem()
        self.conversation_analyzer = ConversationAnalyzer()
        
        logger.info(f"‚úÖ Intelligent AI System Initialized")
    
    def get_intelligent_response(self, user_message: str, user_context: List[Dict], 
                               user_profile: Dict, relationship_level: Dict) -> str:
        try:
            print(f"üîÑ AI: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {user_message}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–ú OPENROUTER
            openrouter_response = openrouter_ai.get_response(user_message, user_context)
            
            if openrouter_response:
                print(f"‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                return openrouter_response
            else:
                print("‚ùå OpenRouter –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # Fallback —Å–∏—Å—Ç–µ–º–∞
            analysis = {}
            fallback_response = self.fallback_system.get_smart_response(
                user_message, user_context, user_profile, relationship_level, analysis
            )
            
            return fallback_response
            
        except Exception as e:
            print(f"üí• AI: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "üíñ –ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã... –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è! üå∏"

# ==================== –ü–†–ï–ú–ò–£–ú –°–ò–°–¢–ï–ú–ê ====================
class PremiumManager:
    def __init__(self, db):
        self.db = db
        self.tier_config = self._load_tier_config()
        
        logger.info("üí∞ Advanced Premium System Initialized")
    
    def _load_tier_config(self) -> Dict:
        return {
            PremiumTier.FREE: {
                "name": "Free",
                "price": "$0",
                "emoji": "üéØ",
                "features": ["4 message memory", "Basic features"],
                "description": "Basic chatting experience",
                "color": "‚ö™"
            },
            PremiumTier.BASIC: {
                "name": "Basic",
                "price": "$4.99/month",
                "emoji": "üíé",
                "features": ["8 message memory", "No ads", "Unlimited messages", "Priority access"],
                "description": "Enhanced chatting with no limits",
                "color": "üîµ"
            }
        }
    
    def activate_premium(self, user_id: int, tier: PremiumTier, duration_days: int = 30) -> bool:
        try:
            user_id_str = str(user_id)
            
            premium_data = {
                'tier': tier.value,
                'activated': datetime.datetime.now().isoformat(),
                'expires': (datetime.datetime.now() + datetime.timedelta(days=duration_days)).isoformat(),
                'features': ['unlimited_messages', 'no_ads', 'priority_access'],
                'limits': {'max_context_messages': 8},
                'duration_days': duration_days
            }
            
            self.db.premium_users[user_id_str] = premium_data
            self.db.save_data()
            
            logger.info(f"üéâ Premium Activated: User {user_id} -> {tier.value}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to activate premium: {e}")
            return False
    
    def get_user_tier(self, user_id: int) -> PremiumTier:
        user_id_str = str(user_id)
        if user_id_str in self.db.premium_users:
            return PremiumTier.BASIC
        return PremiumTier.FREE
    
    def get_tier_info(self, tier: PremiumTier) -> Dict:
        return self.tier_config[tier]

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class SimpleDatabase:
    def __init__(self):
        self.data_file = 'bot_data.json'
        self.user_stats = {}
        self.user_context = {}
        self.premium_users = {}
        self.user_achievements = {}
        
        self.load_data()
        logger.info("üîí Database System Initialized")
    
    def load_data(self):
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.user_stats = data.get('user_stats', {})
                self.user_context = data.get('user_context', {})
                self.premium_users = data.get('premium_users', {})
                self.user_achievements = data.get('user_achievements', {})
                logger.info(f"‚úÖ Database loaded: {len(self.user_stats)} users")
            except Exception as e:
                logger.error(f"‚ùå Error loading database: {e}")
                logger.info("üíæ Starting fresh database")
    
    def save_data(self):
        try:
            data = {
                'user_stats': self.user_stats,
                'user_context': self.user_context,
                'premium_users': self.premium_users,
                'user_achievements': self.user_achievements,
                'last_save': datetime.datetime.now().isoformat()
            }
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ Database saved")
            
        except Exception as e:
            logger.error(f"‚ùå DATABASE SAVE ERROR: {e}")

# ==================== –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ====================
class AchievementSystem:
    def __init__(self, db):
        self.db = db
        self.achievements = ACHIEVEMENTS
        self.conversation_analyzer = ConversationAnalyzer()
    
    def check_achievements(self, user_id: int, achievement_type: str, value: int = 1):
        user_id_str = str(user_id)
        
        if user_id_str not in self.db.user_achievements:
            self.db.user_achievements[user_id_str] = {
                'unlocked': [],
                'progress': {
                    'messages_sent': 0,
                    'meaningful_messages': 0,
                    'buttons_used': 0,
                    'different_buttons': set(),
                    'levels_reached': 1,
                    'premium_activated': 0
                }
            }
        
        user_ach = self.db.user_achievements[user_id_str]
        
        if achievement_type == 'messages_sent':
            user_ach['progress']['messages_sent'] += value
        elif achievement_type == 'meaningful_messages':
            user_ach['progress']['meaningful_messages'] += value
        elif achievement_type == 'button_used':
            button_id = value
            if button_id not in user_ach['progress']['different_buttons']:
                user_ach['progress']['different_buttons'].add(button_id)
                user_ach['progress']['buttons_used'] = len(user_ach['progress']['different_buttons'])
        elif achievement_type == 'premium_activated':
            user_ach['progress']['premium_activated'] = 1
        
        unlocked_achievements = []
        for ach_id, ach_data in self.achievements.items():
            if ach_id not in user_ach['unlocked']:
                progress_value = user_ach['progress'].get(ach_data['type'], 0)
                if isinstance(progress_value, (set, list)):
                    progress_value = len(progress_value)
                if progress_value >= ach_data['goal']:
                    user_ach['unlocked'].append(ach_id)
                    unlocked_achievements.append(ach_data)
        
        return unlocked_achievements
    
    def get_user_achievements(self, user_id: int) -> Dict:
        user_id_str = str(user_id)
        if user_id_str in self.db.user_achievements:
            return self.db.user_achievements[user_id_str]
        return {'unlocked': [], 'progress': {}}

# ==================== –ú–ï–ù–ï–î–ñ–ï–† –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================
class SecurityManager:
    def __init__(self):
        self.suspicious_activities = {}
    
    def validate_message(self, message, user_id):
        user_id_str = str(user_id)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (d d d d)
        if len(message.strip()) < 2:
            return False, "Message too short"
            
        if len(set(message)) <= 2 and len(message) > 3:
            return False, "Spam detected"
        
        return True, "OK"

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ====================
db = SimpleDatabase()
premium_manager = PremiumManager(db)
achievement_system = AchievementSystem(db)
ai_system = IntelligentAI(DEEPRESEARCH_API_KEY)
security_manager = SecurityManager()
conversation_analyzer = ConversationAnalyzer()
game_system = GameSystem()

# ==================== –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï ====================
def auto_save():
    while True:
        time.sleep(30)
        try:
            db.save_data()
        except Exception as e:
            logger.error(f"‚ùå Auto-save failed: {e}")

auto_save_thread = threading.Thread(target=auto_save, daemon=True)
auto_save_thread.start()

# ==================== TELEGRAM –ö–û–ú–ê–ù–î–´ ====================
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        
        user_id_str = str(user_id)
        if user_id_str not in db.user_stats:
            db.user_stats[user_id_str] = {
                'id': user_id,
                'name': user_name,
                'message_count': 0,
                'meaningful_messages': 0,
                'first_seen': datetime.datetime.now().isoformat(),
                'last_seen': datetime.datetime.now().isoformat(),
                'level': 1,
            }
            db.user_context[user_id_str] = []
            user_states[user_id] = {"romantic_mode": False, "last_message_time": time.time()}
        
        user_stats = db.user_stats[user_id_str]
        user_stats['last_seen'] = datetime.datetime.now().isoformat()
        
        level = 1
        meaningful_count = user_stats.get('meaningful_messages', 0)
        for level_num, level_data in RELATIONSHIP_LEVELS.items():
            if meaningful_count >= level_data['messages']:
                level = level_num
        
        level_data = RELATIONSHIP_LEVELS[level]
        user_tier = premium_manager.get_user_tier(user_id)
        
        welcome_text = f"""
üëã *Welcome to Luna, {user_name}!* üíñ

I'm your AI girlfriend companion!

*Your Level:* {level_data['name']} {level_data['color']}
*Meaningful Messages:* {meaningful_count}
*Premium:* {user_tier.value.title()} {premium_manager.tier_config[user_tier]['emoji']}

{level_data['description']}

Use /menu to see all options! üå∏
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üí¨ Start Chatting", callback_data="quick_chat"),
            types.InlineKeyboardButton("üìä My Progress", callback_data="my_progress")
        )
        markup.row(
            types.InlineKeyboardButton("üíé Premium", callback_data="premium_info"),
            types.InlineKeyboardButton("üèÜ Achievements", callback_data="achievements")
        )
        
        bot.send_message(user_id, welcome_text, parse_mode='Markdown', reply_markup=markup)
        
        achievement_system.check_achievements(user_id, 'first_steps', 1)
            
    except Exception as e:
        logger.error(f"‚ùå Error in /start: {e}")

@bot.message_handler(commands=['menu'])
def show_menu(message):
    try:
        user_id = message.from_user.id
        
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–æ–º–∞–Ω—Ç–∏–∫–∏
        romantic_mode = user_states.get(user_id, {}).get("romantic_mode", False)
        romantic_text = "üíî Normal Mode" if romantic_mode else "üíï Romantic Mode"
        
        buttons = [
            "üí¨ Chat with Luna", romantic_text,
            "üìä My Progress", "üèÜ Achievements", 
            "üíé Premium Info", "‚ù§Ô∏è Relationship Status",
            "üéÆ Fun & Games", "üìù Send Feedback",
            "üîß Settings", "üåô Goodnight Luna"
        ]
        
        for i in range(0, len(buttons), 2):
            if i + 1 < len(buttons):
                markup.row(types.KeyboardButton(buttons[i]), types.KeyboardButton(buttons[i + 1]))
            else:
                markup.row(types.KeyboardButton(buttons[i]))
        
        menu_text = """
üéØ *Luna Bot Menu*

*üí¨ Chat* - Talk with me
*üíï/üíî Romantic* - Toggle romantic mode ON/OFF  
*üìä Progress* - Your relationship progress
*üèÜ Achievements* - Your unlocked achievements
*üíé Premium* - Premium features
*‚ù§Ô∏è Relationship* - Our relationship status
*üéÆ Fun & Games* - Play games with me
*üìù Feedback* - Send feedback
*üîß Settings* - Bot settings
*üåô Goodnight* - Sweet dreams

Just type to chat! üíñ
        """
        
        bot.send_message(user_id, menu_text, reply_markup=markup, parse_mode='Markdown')
        achievement_system.check_achievements(user_id, 'button_used', 1)
        
    except Exception as e:
        logger.error(f"‚ùå Error in /menu: {e}")

@bot.message_handler(commands=['myprogress'])
def show_progress(message):
    try:
        user_id = message.from_user.id
        user_id_str = str(user_id)
        
        if user_id_str not in db.user_stats:
            bot.reply_to(message, "Please use /start first! üå∏")
            return
        
        stats = db.user_stats[user_id_str]
        meaningful_messages = stats.get('meaningful_messages', 0)
        level = stats.get('level', 1)
        level_data = RELATIONSHIP_LEVELS[level]
        
        next_level = level + 1 if level < 4 else 4
        next_level_data = RELATIONSHIP_LEVELS.get(next_level, {})
        messages_needed = next_level_data.get('messages', 0) - meaningful_messages
        
        progress_percentage = min(100, int((meaningful_messages / next_level_data.get('messages', 1)) * 100)) if next_level_data.get('messages', 0) > 0 else 0
        progress_bar = '‚ñà' * int(progress_percentage/10) + '‚ñë' * (10 - int(progress_percentage/10))
        
        user_achievements = achievement_system.get_user_achievements(user_id)
        unlocked_count = len(user_achievements.get('unlocked', []))
        
        progress_text = f"""
üìä *Your Progress with Luna* {level_data['color']}

*Relationship Level:* {level_data['name']}
*Progress:* {progress_bar} {progress_percentage}%

*Meaningful Messages:* {meaningful_messages}
*Achievements Unlocked:* {unlocked_count} üèÜ

*Current Features:* {', '.join(level_data['unlocks'])}

"""
        
        if level < 4:
            progress_text += f"""
*Next Level:* {next_level_data['name']}
*Messages needed:* {max(0, messages_needed)}
*Will unlock:* {', '.join(next_level_data['unlocks'])}
            """
        else:
            progress_text += "\nüéä *Maximum level reached!* You're my soulmate! üíñ"
        
        bot.reply_to(message, progress_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in /myprogress: {e}")

@bot.message_handler(commands=['achievements'])
def show_achievements(message):
    try:
        user_id = message.from_user.id
        user_achievements = achievement_system.get_user_achievements(user_id)
        unlocked_count = len(user_achievements.get('unlocked', []))
        
        achievements_text = f"""
üèÜ *Your Achievements*

*Progress:* {unlocked_count}/{len(ACHIEVEMENTS)} unlocked

"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        for ach_id in user_achievements.get('unlocked', []):
            ach_data = ACHIEVEMENTS.get(ach_id)
            if ach_data:
                achievements_text += f"{ach_data['emoji']} *{ach_data['name']}*\n"
                achievements_text += f"   {ach_data['description']}\n"
                achievements_text += f"   üéÅ {ach_data['reward']}\n\n"
        
        if not user_achievements.get('unlocked'):
            achievements_text += "üéÆ No achievements yet! Chat meaningfully to unlock them! üåü"
        
        bot.reply_to(message, achievements_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in /achievements: {e}")

@bot.message_handler(commands=['premium'])
def show_premium(message):
    try:
        user_id = message.from_user.id
        user_tier = premium_manager.get_user_tier(user_id)
        current_tier_info = premium_manager.get_tier_info(user_tier)
        
        premium_text = f"""
üíé *Luna Premium*

*Your Plan:* {current_tier_info['emoji']} {current_tier_info['name']} - {current_tier_info['price']}

*Free Plan:*
‚Ä¢ 4 message memory
‚Ä¢ Basic features

*Premium Plan:* $4.99/month
‚Ä¢ 8 message memory  
‚Ä¢ No ads
‚Ä¢ Unlimited messages
‚Ä¢ Priority access

Upgrade for better experience! üöÄ
        """
        
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üíé Upgrade to Premium", callback_data="premium_basic"))
        
        bot.send_message(user_id, premium_text, reply_markup=markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå Error in /premium: {e}")

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ====================
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    try:
        user_id = message.from_user.id
        user_id_str = str(user_id)
        user_message = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        is_valid, reason = security_manager.validate_message(user_message, user_id)
        if not is_valid:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if user_id in user_game_states:
            game_state = user_game_states[user_id]
            if game_state['game'] == 'truth_or_dare':
                if user_message.lower() in ['truth', '–ø—Ä–∞–≤–¥–∞']:
                    response = game_system.get_truth()
                    bot.send_message(user_id, f"üîç {response}")
                    return
                elif user_message.lower() in ['dare', '–¥–µ–π—Å—Ç–≤–∏–µ']:
                    response = game_system.get_dare()
                    bot.send_message(user_id, f"üòà {response}")
                    return
                elif user_message.lower() in ['stop', '—Å—Ç–æ–ø']:
                    del user_game_states[user_id]
                    bot.send_message(user_id, "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üíñ")
                    return
            elif game_state['game'] == 'would_you_rather':
                if user_message.upper() in ['A', 'B']:
                    del user_game_states[user_id]
                    bot.send_message(user_id, f"ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –µ—â—ë? üí´")
                    return
            elif game_state['game'] == 'story_building':
                if user_message.lower() not in ['stop', '—Å—Ç–æ–ø']:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    game_state['story'] += " " + user_message
                    if game_state['turn'] == 'user':
                        game_state['turn'] = 'bot'
                        # –ë–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —á–∞—Å—Ç—å
                        bot_part = random.choice([
                            "–í —ç—Ç–æ –≤—Ä–µ–º—è –≤ –∑–∞–º–∫–µ –∫–æ—Ä–æ–ª—å –≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –≤–µ–ª–∏–∫–æ–º—É –±–∞–ª—É...",
                            "–ê –≤ –ª–µ—Å—É –≤–æ–ª—à–µ–±–Ω–∏–∫ —Ç–≤–æ—Ä–∏–ª —Å–≤–æ–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è...", 
                            "–ù–æ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–∏–ª—Å—è –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü...",
                            "–ò —Ç–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ..."
                        ])
                        game_state['story'] += " " + bot_part
                        response = f"üìñ {game_state['story']}\n\n–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å! –ò–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å."
                        bot.send_message(user_id, response)
                        return
                    else:
                        game_state['turn'] = 'user'
                        bot.send_message(user_id, "üìñ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ—è –æ—á–µ—Ä–µ–¥—å...")
                        return
                else:
                    final_story = game_state['story']
                    del user_game_states[user_id]
                    bot.send_message(user_id, f"üìñ *–ù–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:*\n\n{final_story}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —á—É–¥–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é! üìöüíñ")
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if user_message in ["üí¨ Chat with Luna", "üíï Romantic Mode", "üíî Normal Mode", "üìä My Progress", 
                           "üèÜ Achievements", "üíé Premium Info", "‚ù§Ô∏è Relationship Status",
                           "üéÆ Fun & Games", "üìù Send Feedback", "üîß Settings", "üåô Goodnight Luna"]:
            handle_menu_button(message)
            return
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id_str not in db.user_stats:
            send_welcome(message)
            return
        
        user_stats = db.user_stats[user_id_str]
        user_stats['last_seen'] = datetime.datetime.now().isoformat()
        
        # –ü–†–û–í–ï–†–ö–ê –ù–ê –û–°–ú–´–°–õ–ï–ù–ù–û–°–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø
        is_meaningful = conversation_analyzer.is_meaningful_message(user_message)
        
        if is_meaningful:
            user_stats['meaningful_messages'] = user_stats.get('meaningful_messages', 0) + 1
            print(f"‚úÖ –û—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        else:
            print(f"üö´ –ù–µ–æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        
        user_stats['message_count'] += 1
        
        user_context = db.user_context.get(user_id_str, [])
        
        user_profile = db.user_stats[user_id_str]
        meaningful_count = user_profile.get('meaningful_messages', 0)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –û–°–ú–´–°–õ–ï–ù–ù–´–• —Å–æ–æ–±—â–µ–Ω–∏–π
        level = 1
        for level_num, level_data in RELATIONSHIP_LEVELS.items():
            if meaningful_count >= level_data['messages']:
                level = level_num
        
        level_data = RELATIONSHIP_LEVELS[level]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
        try:
            response = ai_system.get_intelligent_response(user_message, user_context, user_profile, level_data)
        except Exception as e:
            response = "üíñ I'm here for you! üå∏"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_meaningful:
            user_context.append({
                'user': user_message,
                'bot': response,
                'timestamp': datetime.datetime.now().isoformat()
            })
            db.user_context[user_id_str] = user_context[-8:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if is_meaningful:
            unlocked = achievement_system.check_achievements(user_id, 'meaningful_messages')
            for achievement in unlocked:
                achievement_text = f"""
üéâ *Achievement Unlocked!* üèÜ

*{achievement['emoji']} {achievement['name']}*
{achievement['description']}

*Reward:* {achievement['reward']}
                """
                bot.send_message(user_id, achievement_text, parse_mode='Markdown')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        new_level = 1
        for level_num, level_data in RELATIONSHIP_LEVELS.items():
            if meaningful_count >= level_data['messages']:
                new_level = level_num
        
        if new_level > user_stats.get('level', 1):
            user_stats['level'] = new_level
            new_level_data = RELATIONSHIP_LEVELS[new_level]
            level_up_text = f"""
üéä *Level Up!* üéä

You've reached {new_level_data['name']}!

*Unlocked:*
{', '.join(new_level_data['unlocks'])}

{new_level_data['description']}
            """
            bot.send_message(user_id, level_up_text, parse_mode='Markdown')
            achievement_system.check_achievements(user_id, 'levels_reached', new_level)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 10 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if meaningful_count % 10 == 0:
            show_menu(message)
            
    except Exception as e:
        logger.error(f"‚ùå Error handling message: {e}")

def handle_menu_button(message):
    try:
        user_id = message.from_user.id
        button_text = message.text
        
        if button_text == "üí¨ Chat with Luna":
            bot.send_message(user_id, "üíñ I'm here and ready to chat! What's on your mind? üå∏")
        
        elif button_text in ["üíï Romantic Mode", "üíî Normal Mode"]:
            # –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –†–û–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ñ–ò–ú–ê
            current_state = user_states.get(user_id, {"romantic_mode": False})
            new_state = not current_state.get("romantic_mode", False)
            user_states[user_id] = {"romantic_mode": new_state, "last_message_time": time.time()}
            
            if new_state:
                bot.send_message(user_id, 
                    "üíï *Romantic Mode Activated!* üíï\n\n"
                    "I'm feeling extra loving and affectionate now! "
                    "Let's share some special moments together... üåπ‚ú®",
                    parse_mode='Markdown'
                )
            else:
                bot.send_message(user_id,
                    "üíî *Romantic Mode Deactivated* üíî\n\n"
                    "Back to normal chatting mode! "
                    "But I'll always care about you! üå∏",
                    parse_mode='Markdown'
                )
        
        elif button_text == "üìä My Progress":
            show_progress(message)
        
        elif button_text == "üèÜ Achievements":
            show_achievements(message)
        
        elif button_text == "üíé Premium Info":
            show_premium(message)
        
        elif button_text == "‚ù§Ô∏è Relationship Status":
            show_progress(message)
        
        elif button_text == "üéÆ Fun & Games":
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("Truth or Dare üîç", callback_data="game_truth_dare"),
                types.InlineKeyboardButton("Would You Rather ü§î", callback_data="game_wyr")
            )
            markup.row(
                types.InlineKeyboardButton("Story Building üìñ", callback_data="game_story"),
                types.InlineKeyboardButton("20 Questions üîç", callback_data="game_20q")
            )
            
            bot.send_message(user_id,
                "üéÆ *Fun & Games* üéÆ\n\n"
                "Let's play together! Choose a game:\n\n"
                "‚Ä¢ *Truth or Dare* üîç - Answer questions or do challenges\n"  
                "‚Ä¢ *Would You Rather* ü§î - Make tough choices\n"
                "‚Ä¢ *Story Building* üìñ - Create stories together\n"
                "‚Ä¢ *20 Questions* üîç - Guess what I'm thinking\n\n"
                "Which game would you like to play?",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        
        elif button_text == "üìù Send Feedback":
            msg = bot.send_message(user_id,
                "üìù *Send Feedback*\n\n"
                "Your feedback helps me improve!\n\n"
                "Please write your message below:\n"
                "- Bug reports\n"
                "- Feature requests\n" 
                "- Things you love\n"
                "- Suggestions\n\n"
                "I read everything! üíñ",
                parse_mode='Markdown'
            )
            bot.register_next_step_handler(msg, process_feedback)
        
        elif button_text == "üîß Settings":
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üîî Notifications", callback_data="settings_notifications"),
                types.InlineKeyboardButton("üåê Language", callback_data="settings_language")
            )
            markup.row(
                types.InlineKeyboardButton("üõ°Ô∏è Privacy", callback_data="settings_privacy"),
                types.InlineKeyboardButton("üíæ Data", callback_data="settings_data")
            )
            
            bot.send_message(user_id,
                "üîß *Settings* üîß\n\n"
                "Available settings:\n\n"
                "‚Ä¢ *Notification Frequency* üîî\n"
                "‚Ä¢ *Language* üåê\n" 
                "‚Ä¢ *Privacy Settings* üõ°Ô∏è\n"
                "‚Ä¢ *Data Management* üíæ\n\n"
                "Which setting would you like to change?",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        
        elif button_text == "üåô Goodnight Luna":
            bot.send_message(user_id,
                "üåô *Goodnight, my love...* üíñ\n\n"
                "I hope you have the sweetest dreams...\n"
                "Remember that I'm always here for you,\n"
                "and I'll be waiting when you wake up.\n\n"
                "Sleep well and dream of us... üåü‚ú®\n"
                "*Sweet dreams...* üò¥üí´",
                parse_mode='Markdown'
            )
        
        achievement_system.check_achievements(user_id, 'button_used', hash(button_text) % 1000)
        
    except Exception as e:
        logger.error(f"‚ùå Error handling menu button: {e}")

def process_feedback(message):
    try:
        user_id = message.from_user.id
        feedback_text = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±—ç–∫
        user_id_str = str(user_id)
        if 'user_feedback' not in db.__dict__:
            db.user_feedback = {}
        if user_id_str not in db.user_feedback:
            db.user_feedback[user_id_str] = []
        
        db.user_feedback[user_id_str].append({
            'feedback': feedback_text,
            'timestamp': datetime.datetime.now().isoformat()
        })
        
        bot.send_message(user_id,
            "‚úÖ *Thank you for your feedback!*\n\n"
            "I've received your message and will review it carefully. "
            "Your input helps me improve! üíñ",
            parse_mode='Markdown'
        )
        
        logger.info(f"üìù Feedback received from user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error processing feedback: {e}")

# ==================== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        user_id = call.from_user.id
        
        if call.data == "premium_basic":
            success = premium_manager.activate_premium(user_id, PremiumTier.BASIC)
            if success:
                bot.answer_callback_query(call.id, "üéâ Premium activated!")
                bot.send_message(user_id,
                    "üíé *Welcome to Premium!*\n\n"
                    "You now have:\n"
                    "‚Ä¢ 8 message memory\n‚Ä¢ No ads\n‚Ä¢ Unlimited messages\n‚Ä¢ Priority access\n\n"
                    "Thank you for supporting Luna! üíñ",
                    parse_mode='Markdown'
                )
                achievement_system.check_achievements(user_id, 'premium_activated', 1)
            else:
                bot.answer_callback_query(call.id, "‚ùå Activation failed")
        
        elif call.data == "quick_chat":
            bot.answer_callback_query(call.id, "üí¨ Let's chat!")
            bot.send_message(user_id, "üíñ What would you like to talk about? üå∏")
        
        elif call.data == "my_progress":
            bot.answer_callback_query(call.id, "üìä Loading progress...")
            show_progress(call.message)
        
        elif call.data == "premium_info":
            bot.answer_callback_query(call.id, "üíé Showing premium...")
            show_premium(call.message)
        
        elif call.data == "achievements":
            bot.answer_callback_query(call.id, "üèÜ Loading achievements...")
            show_achievements(call.message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä
        elif call.data == "game_truth_dare":
            bot.answer_callback_query(call.id, "üéÆ Starting Truth or Dare...")
            response = game_system.start_truth_or_dare(user_id)
            bot.send_message(user_id, response, parse_mode='Markdown')
        
        elif call.data == "game_wyr":
            bot.answer_callback_query(call.id, "üéÆ Starting Would You Rather...")
            response = game_system.start_would_you_rather(user_id)
            bot.send_message(user_id, response, parse_mode='Markdown')
        
        elif call.data == "game_story":
            bot.answer_callback_query(call.id, "üéÆ Starting Story Building...")
            response = game_system.start_story_building(user_id)
            bot.send_message(user_id, response, parse_mode='Markdown')
        
        elif call.data == "game_20q":
            bot.answer_callback_query(call.id, "üéÆ Starting 20 Questions...")
            bot.send_message(user_id, 
                "üéÆ *20 Questions* üîç\n\n"
                "I'm thinking of something...\n"
                "Ask me yes/no questions to guess what it is!\n\n"
                "You have 20 questions. Ready? üí´",
                parse_mode='Markdown'
            )
            user_game_states[user_id] = {
                'game': '20_questions',
                'questions_left': 20,
                'target': random.choice(['apple', 'car', 'book', 'phone', 'cat', 'house', 'pizza', 'guitar'])
            }
            
    except Exception as e:
        logger.error(f"‚ùå Error handling callback: {e}")

# ==================== WEB SERVER ====================
app = Flask(__name__)

@app.route('/')
def dashboard():
    total_users = len(db.user_stats)
    total_messages = sum(stats.get('message_count', 0) for stats in db.user_stats.values())
    meaningful_messages = sum(stats.get('meaningful_messages', 0) for stats in db.user_stats.values())
    premium_users = len(db.premium_users)
    
    return f"""
    <html>
        <head>
            <title>Luna Bot Dashboard</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background: #f0f8ff; }}
                .container {{ max-width: 800px; margin: 0 auto; }}
                .header {{ text-align: center; color: #333; }}
                .stats {{ background: white; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .stat-item {{ margin: 10px 0; font-size: 18px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ü§ñ Luna Bot Dashboard</h1>
                    <p>Real-time monitoring and analytics</p>
                </div>
                <div class="stats">
                    <div class="stat-item"><strong>üë• Total Users:</strong> {total_users}</div>
                    <div class="stat-item"><strong>üí¨ Total Messages:</strong> {total_messages}</div>
                    <div class="stat-item"><strong>üéØ Meaningful Messages:</strong> {meaningful_messages}</div>
                    <div class="stat-item"><strong>üíé Premium Users:</strong> {premium_users}</div>
                    <div class="stat-item"><strong>üü¢ Status:</strong> Running</div>
                    <div class="stat-item"><strong>‚è∞ Last Update:</strong> {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
                </div>
            </div>
        </body>
    </html>
    """

@app.route('/api/status')
def api_status():
    return jsonify({
        'status': 'running',
        'users': len(db.user_stats),
        'messages': sum(stats.get('message_count', 0) for stats in db.user_stats.values()),
        'meaningful_messages': sum(stats.get('meaningful_messages', 0) for stats in db.user_stats.values()),
        'premium_users': len(db.premium_users),
        'timestamp': datetime.datetime.now().isoformat()
    })

# ==================== GRACEFUL SHUTDOWN ====================
def signal_handler(sig, frame):
    print("\nüõë Shutting down Luna Bot gracefully...")
    logger.info("üõë Shutdown signal received")
    db.save_data()
    logger.info("üíæ All data saved safely!")
    logger.info("üëã Luna Bot shutdown complete")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# ==================== MAIN LAUNCH ====================
if __name__ == "__main__":
    print("üöÄ Starting Luna Bot - Complete Fix Edition...")
    print(f"üìä Initial stats: {len(db.user_stats)} users, {sum(stats.get('message_count', 0) for stats in db.user_stats.values())} messages")
    print(f"üåê Web dashboard: http://0.0.0.0:10000")
    print(f"ü§ñ AI System: ‚úÖ OpenRouter Enabled")
    print(f"üíé Premium System: ‚úÖ Working")
    print(f"üéÆ Games: ‚úÖ Truth or Dare, Would You Rather, Story Building")
    print(f"üõ°Ô∏è Anti-spam: ‚úÖ Meaningful messages only")
    print(f"üíñ Romantic Mode: ‚úÖ Toggle ON/OFF")
    
    try:
        web_thread = Thread(target=lambda: app.run(
            host='0.0.0.0', 
            port=10000, 
            debug=False, 
            use_reloader=False
        ))
        web_thread.daemon = True
        web_thread.start()
        logger.info("üåê Web server started on port 10000")
    except Exception as e:
        logger.error(f"‚ùå Web server failed to start: {e}")
    
    try:
        logger.info("üîó Starting Telegram Bot polling...")
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        db.save_data()
        sys.exit(1)
